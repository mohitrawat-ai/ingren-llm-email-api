# generated by datamodel-codegen:
#   filename:  main-bundled.yaml
#   timestamp: 2025-06-02T19:35:47+00:00

from __future__ import annotations

from datetime import date, datetime
from typing import Annotated, List, Literal, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel

class HealthResponse(BaseModel):
    status: str = "healthy"
    version: str


class Location(BaseModel):
    city: Annotated[str | None, Field(examples=['Austin'])] = None
    state: Annotated[str | None, Field(examples=['Texas'])] = None
    country: Annotated[str | None, Field(examples=['United States'])] = None


class Attributes(BaseModel):
    generated_at: Annotated[
        datetime | None, Field(alias='generatedAt', examples=['2024-06-03T10:30:00Z'])
    ] = None
    processing_time_ms: Annotated[
        int | None, Field(alias='processingTimeMs', examples=[1200], ge=0)
    ] = None
    email_score: Annotated[int, Field(alias='emailScore', examples=[87], ge=0, le=100)]


class Context(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    user_id: Annotated[
        str,
        Field(
            alias='userId',
            description='User identifier for RAG context',
            examples=['user_123'],
        ),
    ]
    tenant_id: Annotated[
        str,
        Field(
            alias='tenantId',
            description='Tenant identifier for multi-tenancy',
            examples=['tenant_456'],
        ),
    ]

class EmailMetadata(BaseModel):
    email_history: Annotated[
        Optional[str],
        Field(
            alias='email_history',
            description='Emails which are already sent to the user',
            examples=['Facing scaling challenges with personalization'],
            default=None
        ),
    ]
    theme: Annotated[
        Optional[str],
        Field(
            alias='theme',
            description='Theme which is to be used for the email',
            examples=['scaling_personalization'],
            default=None
        ),
    ]
    step_number: Annotated[
        int,
        Field(
            alias='step_number',
            description='Step which is to be used for the email',
            examples=[1],
            default=1
        ),
    ]

class PainPoint(RootModel[str]):
    root: Annotated[str, Field(max_length=100)]


class ChangeIndicator(BaseModel):
    type: Annotated[
        Literal[
            'job_change', 'promotion', 'company_growth', 'funding', 'new_initiative'
        ],
        Field(examples=['job_change']),
    ]
    description: Annotated[
        str, Field(examples=['Started VP role 8 months ago'], max_length=200)
    ]
    confidence: Annotated[float | None, Field(examples=[0.9], ge=0.0, le=1.0)] = None


class Employment(BaseModel):
    job_title: Annotated[
        str, Field(alias='jobTitle', examples=['VP of Marketing'], max_length=100)
    ]
    department: Annotated[str | None, Field(examples=['Marketing'], max_length=50)] = (
        None
    )
    start_date: Annotated[
        date | None, Field(alias='startDate', examples=['2024-10-01'])
    ] = None
    is_current: Annotated[bool, Field(alias='isCurrent', examples=[True])]
    tenure_months: Annotated[
        int | None, Field(alias='tenureMonths', examples=[8], ge=0)
    ] = None


class RecentNew(RootModel[str]):
    root: Annotated[str, Field(max_length=200)]


class Funding(BaseModel):
    last_round_amount: Annotated[
        int | None, Field(alias='lastRoundAmount', examples=[28000000], ge=0)
    ] = None
    last_round_date: Annotated[
        date | None, Field(alias='lastRoundDate', examples=['2024-12-01'])
    ] = None
    last_round_type: Annotated[
        Literal['pre_seed', 'seed', 'series_a', 'series_b', 'series_c', 'bridge', 'ipo']
        | None,
        Field(alias='lastRoundType', examples=['series_b']),
    ] = None


class ValueProposition(RootModel[str]):
    root: Annotated[str, Field(max_length=100)]


class EmailConfig(BaseModel):
    tone: Annotated[
        Literal['professional', 'conversational', 'casual', 'urgent'] | None,
        Field(examples=['conversational']),
    ] = 'conversational'
    max_length: Annotated[
        int | None, Field(alias='maxLength', examples=[80], ge=30, le=200)
    ] = 80
    urgency: Annotated[
        Literal['low', 'medium', 'high'] | None, Field(examples=['medium'])
    ] = 'medium'


class GeneratedEmail(BaseModel):
    subject: Annotated[
        str,
        Field(
            examples=["ZephyrTech's growth means more prospects to research?"],
            max_length=100,
        ),
    ]
    body: Annotated[
        str,
        Field(
            examples=[
                "Hi Sarah,\n\nCongrats on ZephyrTech's Series B! $28M is huge for Austin's tech scene..."
            ],
            max_length=2000,
        ),
    ]
    word_count: Annotated[int | None, Field(alias='wordCount', examples=[85], ge=1)] = (
        None
    )


class Personalization(BaseModel):
    elements_used: Annotated[
        List[
            Literal[
                'company_funding',
                'location_reference',
                'role_specific_pain_point',
                'company_growth_context',
                'job_change',
                'industry_insight',
                'mutual_connection',
            ]
        ],
        Field(
            alias='elementsUsed',
            examples=[
                ['company_funding', 'location_reference', 'role_specific_pain_point']
            ],
            max_length=10,
        ),
    ]
    primary_personalization: Annotated[
        str | None,
        Field(
            alias='primaryPersonalization', examples=['recent_funding'], max_length=50
        ),
    ] = None
    confidence: Annotated[float, Field(examples=[0.89], ge=0.0, le=1.0)]


class BaseEntity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Annotated[str, Field(description='Unique identifier', examples=['12847'])]


class Prospect(BaseEntity):
    name: Annotated[str, Field(examples=['Sarah Chen'], max_length=100)]
    first_name: Annotated[
        str | None, Field(alias='firstName', examples=['Sarah'], max_length=50)
    ] = None
    last_name: Annotated[
        str | None, Field(alias='lastName', examples=['Chen'], max_length=50)
    ] = None
    title: Annotated[str, Field(examples=['VP of Marketing'], max_length=100)]
    company: Annotated[str, Field(examples=['ZephyrTech Solutions'], max_length=100)]
    location: Location | None = None
    buying_intent: Annotated[
        Literal['low', 'medium', 'high'] | None,
        Field(alias='buyingIntent', examples=['high']),
    ] = None
    prospect_score: Annotated[
        int | None, Field(alias='prospectScore', examples=[87], ge=0, le=100)
    ] = None
    change_indicators: Annotated[
        List[ChangeIndicator] | None, Field(alias='changeIndicators', max_length=10)
    ] = None
    pain_points: Annotated[
        List[PainPoint] | None,
        Field(
            alias='painPoints',
            examples=[['scaling_personalization', 'manual_research_bottleneck']],
            max_length=5,
        ),
    ] = None


class Company(BaseEntity):
    name: Annotated[str, Field(examples=['ZephyrTech Solutions'], max_length=100)]
    industry: Annotated[
        str, Field(examples=['SaaS - Project Management'], max_length=100)
    ]
    employee_count: Annotated[
        int | None, Field(alias='employeeCount', examples=[285], ge=1)
    ] = None
    location: Location | None = None
    recent_news: Annotated[
        List[RecentNew] | None,
        Field(
            alias='recentNews',
            examples=[
                [
                    'Raised $28M Series B to expand into enterprise market',
                    'Launched AI-powered project forecasting features',
                ]
            ],
            max_length=5,
        ),
    ] = None
    funding: Funding | None = None


class Campaign(BaseEntity):
    objective: Annotated[
        str,
        Field(
            examples=[
                'Book meetings with marketing leaders struggling with personalization'
            ],
            max_length=200,
        ),
    ]
    pain_points: Annotated[
        List[PainPoint] | None,
        Field(
            alias='painPoints',
            examples=[
                [
                    "Manual personalization doesn't scale with growth",
                    'Generic outreach gets ignored by prospects',
                ]
            ],
            max_length=5,
        ),
    ] = None
    value_propositions: Annotated[
        List[ValueProposition] | None,
        Field(
            alias='valuePropositions',
            examples=[
                [
                    'Automate 20+ hours of manual work/week',
                    '3x response rate improvement',
                ]
            ],
            max_length=5,
        ),
    ] = None
    call_to_action: Annotated[
        str,
        Field(
            alias='callToAction', examples=['15-minute strategy call'], max_length=50
        ),
    ]
    email_config: Annotated[EmailConfig, Field(alias='emailConfig')]


class EmailGenerationRequest(BaseModel):
    prospect: Prospect
    company: Company | None = None
    employment: Employment | None = None
    campaign: Campaign
    context: Context
    metadate: EmailMetadata

    sample_email: Annotated[
        Optional[str],
        Field(
            alias='sample_email',
            description='A sample email which can optionally provided by the user',
            examples=['Contact us if you are facing scaling challenges', 'Congratulations on your new job'],
            default=None
        )
    ]


class EmailGenerationResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    success: Annotated[bool, Field(examples=[True])]
    email: GeneratedEmail
    personalization: Personalization | None = None
    attributes: Attributes | None = None


class Error(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    code: Annotated[
        Literal[
            'insufficient_data', 'invalid_campaign', 'llm_error', 'processing_error'
        ],
        Field(examples=['insufficient_data']),
    ]
    message: Annotated[
        str,
        Field(
            examples=['Minimum prospect data required: name, company'], max_length=200
        ),
    ]
    fallback: GeneratedEmail | None = None


class EmailGenerationError(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    success: Annotated[bool, Field(examples=[False])]
    error: Error
